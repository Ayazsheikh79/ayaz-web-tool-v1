generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  name                    String
  email                   String                   @unique
  password                String?
  role                    String                   @default("user")
  plan                    Plan[]
  envatoMonthlyLimit      EnvatoMonthlyLimit?
  freepikMonthlyLimit     FreePikMonthlyLimit?
  envatoLimit             EnvatoLimit?
  freepikLimit            FreePikLimit?
  artlistLimit            ArtlistLimit?
  artlistMonthlyLimit     ArtlistMonthlyLimit?
  vectorStockLimit        VectorStockLimit?
  vectorStockMonthlyLimit VectorStockMonthlyLimit?
  credit                  Credit[]
}

model EnvatoMonthlyLimit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  planCode  Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  envato    Int      @default(0)
}

model FreePikMonthlyLimit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  planCode  Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  freepik   Int      @default(0)
}

model EnvatoLimit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  planCode  Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  envato    Int      @default(0)
}

model FreePikLimit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  planCode  Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  freepik   Int      @default(0)
}

model ArtlistLimit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  planCode  Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  artlist   Int      @default(0)
}

model ArtlistMonthlyLimit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  planCode  Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  artlist   Int      @default(0)
}

model VectorStockLimit {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  planCode    Int      @default(0)
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique @db.ObjectId
  vectorStock Int      @default(0)
}

model VectorStockMonthlyLimit {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  planCode    Int      @default(0)
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique @db.ObjectId
  vectorStock Int      @default(0)
}

model Plan {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  planCode  Int
  active    Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  startDate DateTime
  endDate   DateTime
}

model RedeemCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  code      String   @unique
  active    Boolean  @default(true)
  planCode  Int      @default(0)
  duration  Int      @default(30)
  name      String
  credit    Float    @default(0)
}

model Credit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  amount    Float
  endDate   DateTime
}

model TelegramUser {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  telegramId  Int          @unique
  username    String?
  envato      Envato?
  freepik     FreePik?
  artlist     Artlist?
  vectorStock VectorStock?
  adobestock  Adobestock?
}

model Envato {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      TelegramUser @relation(fields: [userId], references: [id])
  userId    String       @unique @db.ObjectId
  envato    Int          @default(1)
}

model FreePik {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      TelegramUser @relation(fields: [userId], references: [id])
  userId    String       @unique @db.ObjectId
  freepik   Int          @default(1)
}

model Artlist {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      TelegramUser @relation(fields: [userId], references: [id])
  userId    String       @unique @db.ObjectId
  artlist   Int          @default(1)
}

model VectorStock {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        TelegramUser @relation(fields: [userId], references: [id])
  userId      String       @unique @db.ObjectId
  vectorStock Int          @default(1)
}

model Adobestock {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       TelegramUser @relation(fields: [userId], references: [id])
  userId     String       @unique @db.ObjectId
  adobestock Int          @default(1)
}
